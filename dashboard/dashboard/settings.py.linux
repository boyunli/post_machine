"""
Django settings for data_rest_api project.

Generated by 'django-admin startproject' using Django 1.9.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 's&ks%h9nxgzy)#%(m($)jvb86x(g%8x$#5rgco4(j=3%24&-n$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'django_extensions',
    'rest_framework',
    'corsheaders',
    'v1_api',
    'permissions'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

#### debug toolbar config
INTERNAL_IPS = ('192.168.56.101', '127.0.0.1')

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
]

def show_toolbar(request):
    return True

DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK" : show_toolbar,
    }

#### Memcached config
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        #'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '172.17.240.6:11211',
        'TIMEOUT': 60*60*5,
        'OPTIONS': {
		},
    }
}

ROOT_URLCONF = 'data_rest_api.urls'

CORS_ORIGIN_ALLOW_ALL = True

# pagination
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20
}

# OAUTH2
JIANKE_OAUTH2_KEY = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCd78b/UgjNSa1izNGafsNHcjyPcj9oKMLqkckdu8o3d2h3SHdjFXeoZhTR7MdtL836vOyJLtjWCbVv92MrZJ9iFEU7cEu8brT7+kYSKNt9UliqPR9GMdzDcB7B7ODrG8hiyYAG590TzMQUKpKYLe1SxVETRvvGG1h9OTMZq5jI6wIDAQAB"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'data_rest_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
DB6_HOST = '172.17.240.6'
DB6_USER = 'root'
DB6_PASSWD = '2016abc'
DB6 = 'shengyicanmou'
DB6_PORT = 3306
DB6_CHARSET = 'utf8'

#DB_HOST = '172.17.240.6'
#DB_PASSWD = '2016abc'
DB_HOST = '172.17.240.5'
DB_PASSWD = 'jianke@123'
DB_USER = 'root'
DB = 'data_play'
DB_PORT = 3306

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWD,
        'HOST': DB_HOST,
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

#存放项目中公用的静态文件
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

#python manage.py collectstatic:将所有STATICFILES_DIRS中所有文件夹中的文件，以及各app中static中的文件都复制过来
STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')

LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                #'format': '%(levelname)s %(asctime)s (%(process)d:%(thread)d)%(pathname)s:%(lineno)d %(message)s',
                'format': '%(levelname)s %(asctime)s%(pathname)s:%(lineno)d:%(funcName)s: %(message)s',
                },
            'simple': {
                'format': '%(asctime)s %(message)s',
                },
            },
        'filters': {
            'special': {
                #'()': 'project.logging.SpecialFilter',
                'foo': 'bar',
                },
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
                },
            },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
                #'filters': ['special'],
                },
            'dump-excel': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'formatter': 'simple',
                'filename': os.path.join(BASE_DIR, 'log/dump-excel.log'),
                },
            'data-file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'formatter': 'verbose',
                'filename': os.path.join(BASE_DIR, 'log/data-develop.log'),
                },
            'data-request-file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'formatter': 'verbose',
                'filename': os.path.join(BASE_DIR, 'log/data-develop-request.log',)
                },
            },
        'loggers': {
            'excel': {
                'handlers': ['console', 'dump-excel'],
                'level': 'DEBUG',
                'propagate': True,
                },
            'data': {
                'handlers': ['console', 'data-file'],
                'level': 'DEBUG',
                'propagate': True,
                },
            'data_request': {
                'handlers': ['console', 'data-request-file'],
                'level': 'DEBUG',
                'propagate': True,
                },
            },
    }


###############  添加celery配置  ###############################
BROKER_URL = 'redis://:helloworld@172.17.240.6:6379/9'
CELERY_RESULT_BACKEND = 'redis://:helloworld@172.17.240.6:6379/10'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_IGNORE_RESULT = True

# 任务队列
from kombu import Exchange, Queue
from celery.schedules import crontab
#from datetime import timedelta

CELERYBEAT_SCHEDULE={
    'negative_product_task': {
        'task': 'negative_product_task',
        # 9,12,17,20
        'schedule': crontab(hour='1,4,9,12', minute=00),
        #'schedule': timedelta(minutes=0.1),
        #'schedule': crontab(minute='*/1'),
        'options': {'queue': 'negative_product_queue',
                    'routing_key': 'for_negative_product'}
    },
}

CELERY_QUEUES = (
    Queue('default', Exchange('default'), routing_key='default'),
    Queue('negative_product_queue',
          Exchange('negative_product_task', type='direct'),
          routing_key='for_negative_product'),
)

CELERY_ROUTES = {
    'negative_product_task': {'queue': 'negative_product_queue',
                             'routing_key': 'for_negative_product'},
}

