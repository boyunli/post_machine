"""
Django settings for dashboard project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'abx-r11&0oa13(iapi(%8#k+uk&u!jwug4nygh&xhnk(x@f45f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'postsite',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dashboard.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dashboard.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'post_machine',
        'USER': 'root',
        'PASSWORD': 'root.123',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

###############  添加logger配置  ###############################
LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(levelname)s %(asctime)s %(pathname)s:%(lineno)d:%(funcName)s: %(message)s',
                },
            'simple': {
                'format': '%(levelname)s %(message)s',
                },
            },
        'filters': {
            'special': {
                #'()': 'project.logging.SpecialFilter',
                'foo': 'bar',
                },
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
                },
            },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
                #'filters': ['special'],
                },
            'tieba-file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': BASE_DIR +'/log/tieba-develop.log',
                },
            'tieba-request-file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': BASE_DIR +'/log/tieba-develop-request.log',
                },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': BASE_DIR +'/log/django-request.log',
                },
            'null': {
                'class': 'logging.NullHandler',
                },
            },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
                'propagate': True,
                },
            'tieba': {
                'handlers': ['console', 'tieba-file'],
                'level': os.getenv('TIEBA_LOG_LEVEL', 'DEBUG'),
                'propagate': True,
                },
            'tieba_request': {
                'handlers': ['console', 'tieba-request-file'],
                'level': os.getenv('TIEBA_LOG_LEVEL', 'DEBUG'),
                'propagate': True,
                },
            },
    }


###############  添加celery配置  ###############################
BROKER_URL = 'redis://:helloworld@127.0.0.1:6379/9'
CELERY_RESULT_BACKEND = 'redis://:helloworld@127.0.0.1:6379/10'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_IGNORE_RESULT = True

# 任务队列
from kombu import Exchange, Queue
from celery.schedules import crontab
#from datetime import timedelta

CELERYBEAT_SCHEDULE={
    'post_toutiao': {
        'task': 'post_toutiao',
        # 'schedule': timedelta(minutes=0.1),
        # 8-22, per 2 hour
        'schedule': crontab(minute='02', hour='0,2,4,6,8,10,12,14'),
        'options': {'queue': 'post_toutiao_queue',
                    'routing_key': 'for_post_toutiao'}
    },
    'post_weibo': {
        'task': 'post_weibo',
        #'schedule': timedelta(minutes=0.1),
        # 'schedule': crontab(minute=25, hour='0-14'),
        'schedule': crontab(minute='25', hour='0,2,4,6,8,10,12,14'),
        'options': {'queue': 'post_weibo_queue',
                    'routing_key': 'for_post_weibo'}
    },
}

CELERY_QUEUES = (
    Queue('default', Exchange('default'), routing_key='default'),
    Queue('post_toutiao_queue',
          Exchange('post_toutiao', type='direct'),
          routing_key='for_post_toutiao'),
    Queue('post_weibo_queue',
          Exchange('post_weibo', type='direct'),
          routing_key='for_post_weibo'),
)

CELERY_ROUTES = {
    'post_toutiao': {'queue': 'post_toutiao_queue',
                     'routing_key': 'for_post_toutiao'},
    'post_weibo': {'queue': 'post_weibo_queue',
                     'routing_key': 'for_post_weibo'},
}

